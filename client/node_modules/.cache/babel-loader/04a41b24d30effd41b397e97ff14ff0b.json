{"ast":null,"code":"import _asyncToGenerator from\"/home/netto/Documentos/workspace/Nasa-Project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/netto/Documentos/workspace/Nasa-Project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/netto/Documentos/workspace/Nasa-Project/client/node_modules/@babel/runtime/regenerator/index.js\";import{useCallback,useEffect,useState}from\"react\";import{httpGetLaunches,httpSubmitLaunch,httpAbortLaunch}from'./requests';function useLaunches(onSuccessSound,onAbortSound,onFailureSound){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),launches=_useState2[0],saveLaunches=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isPendingLaunch=_useState4[0],setPendingLaunch=_useState4[1];var getLaunches=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var fetchedLaunches;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return httpGetLaunches();case 2:fetchedLaunches=_context.sent;saveLaunches(fetchedLaunches);case 4:case\"end\":return _context.stop();}}},_callee);})),[]);useEffect(function(){getLaunches();},[getLaunches]);var submitLaunch=useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e){var data,launchDate,mission,rocket,target,response,success;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:e.preventDefault();setPendingLaunch(true);data=new FormData(e.target);launchDate=new Date(data.get(\"launch-day\"));mission=data.get(\"mission-name\");rocket=data.get(\"rocket-name\");target=data.get(\"planets-selector\");_context2.next=9;return httpSubmitLaunch({launchDate:launchDate,mission:mission,rocket:rocket,target:target});case 9:response=_context2.sent;// TODO: Set success based on response.\nsuccess=response.ok;if(success){getLaunches();setTimeout(function(){setPendingLaunch(false);onSuccessSound();},800);}else{onFailureSound();}case 12:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref2.apply(this,arguments);};}(),[getLaunches,onSuccessSound,onFailureSound]);var abortLaunch=useCallback(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id){var response,success;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return httpAbortLaunch(id);case 2:response=_context3.sent;// TODO: Set success based on response.\nsuccess=response.ok;if(success){getLaunches();onAbortSound();}else{onFailureSound();}case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref3.apply(this,arguments);};}(),[getLaunches,onAbortSound,onFailureSound]);return{launches:launches,isPendingLaunch:isPendingLaunch,submitLaunch:submitLaunch,abortLaunch:abortLaunch};}export default useLaunches;","map":{"version":3,"sources":["/home/netto/Documentos/workspace/Nasa-Project/client/src/hooks/useLaunches.js"],"names":["useCallback","useEffect","useState","httpGetLaunches","httpSubmitLaunch","httpAbortLaunch","useLaunches","onSuccessSound","onAbortSound","onFailureSound","launches","saveLaunches","isPendingLaunch","setPendingLaunch","getLaunches","fetchedLaunches","submitLaunch","e","preventDefault","data","FormData","target","launchDate","Date","get","mission","rocket","response","success","ok","setTimeout","abortLaunch","id"],"mappings":"iaAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,QAAjC,KAAiD,OAAjD,CAEA,OACEC,eADF,CAEEC,gBAFF,CAGEC,eAHF,KAIO,YAJP,CAMA,QAASC,CAAAA,WAAT,CAAqBC,cAArB,CAAqCC,YAArC,CAAmDC,cAAnD,CAAmE,CACjE,cAAiCP,QAAQ,CAAC,EAAD,CAAzC,wCAAOQ,QAAP,eAAiBC,YAAjB,eACA,eAA4CT,QAAQ,CAAC,KAAD,CAApD,yCAAOU,eAAP,eAAwBC,gBAAxB,eAEA,GAAMC,CAAAA,WAAW,CAAGd,WAAW,sEAAC,6KACAG,CAAAA,eAAe,EADf,QACxBY,eADwB,eAE9BJ,YAAY,CAACI,eAAD,CAAZ,CAF8B,sDAAD,GAG5B,EAH4B,CAA/B,CAKAd,SAAS,CAAC,UAAM,CACda,WAAW,GACZ,CAFQ,CAEN,CAACA,WAAD,CAFM,CAAT,CAIA,GAAME,CAAAA,YAAY,CAAGhB,WAAW,2FAAC,kBAAOiB,CAAP,iLAC/BA,CAAC,CAACC,cAAF,GACAL,gBAAgB,CAAC,IAAD,CAAhB,CACMM,IAHyB,CAGlB,GAAIC,CAAAA,QAAJ,CAAaH,CAAC,CAACI,MAAf,CAHkB,CAIzBC,UAJyB,CAIZ,GAAIC,CAAAA,IAAJ,CAASJ,IAAI,CAACK,GAAL,CAAS,YAAT,CAAT,CAJY,CAKzBC,OALyB,CAKfN,IAAI,CAACK,GAAL,CAAS,cAAT,CALe,CAMzBE,MANyB,CAMhBP,IAAI,CAACK,GAAL,CAAS,aAAT,CANgB,CAOzBH,MAPyB,CAOhBF,IAAI,CAACK,GAAL,CAAS,kBAAT,CAPgB,wBAQRpB,CAAAA,gBAAgB,CAAC,CACtCkB,UAAU,CAAVA,UADsC,CAEtCG,OAAO,CAAPA,OAFsC,CAGtCC,MAAM,CAANA,MAHsC,CAItCL,MAAM,CAANA,MAJsC,CAAD,CARR,QAQzBM,QARyB,gBAe/B;AACMC,OAhByB,CAgBfD,QAAQ,CAACE,EAhBM,CAiB/B,GAAID,OAAJ,CAAa,CACXd,WAAW,GACXgB,UAAU,CAAC,UAAM,CACfjB,gBAAgB,CAAC,KAAD,CAAhB,CACAN,cAAc,GACf,CAHS,CAGP,GAHO,CAAV,CAID,CAND,IAMO,CACLE,cAAc,GACf,CAzB8B,yDAAD,gEA0B7B,CAACK,WAAD,CAAcP,cAAd,CAA8BE,cAA9B,CA1B6B,CAAhC,CA4BA,GAAMsB,CAAAA,WAAW,CAAG/B,WAAW,2FAAC,kBAAOgC,EAAP,kKACP3B,CAAAA,eAAe,CAAC2B,EAAD,CADR,QACxBL,QADwB,gBAG9B;AACMC,OAJwB,CAIdD,QAAQ,CAACE,EAJK,CAK9B,GAAID,OAAJ,CAAa,CACXd,WAAW,GACXN,YAAY,GACb,CAHD,IAGO,CACLC,cAAc,GACf,CAV6B,wDAAD,iEAW5B,CAACK,WAAD,CAAcN,YAAd,CAA4BC,cAA5B,CAX4B,CAA/B,CAaA,MAAO,CACLC,QAAQ,CAARA,QADK,CAELE,eAAe,CAAfA,eAFK,CAGLI,YAAY,CAAZA,YAHK,CAILe,WAAW,CAAXA,WAJK,CAAP,CAMD,CAED,cAAezB,CAAAA,WAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\n\nimport {\n  httpGetLaunches,\n  httpSubmitLaunch,\n  httpAbortLaunch,\n} from './requests';\n\nfunction useLaunches(onSuccessSound, onAbortSound, onFailureSound) {\n  const [launches, saveLaunches] = useState([]);\n  const [isPendingLaunch, setPendingLaunch] = useState(false);\n\n  const getLaunches = useCallback(async () => {\n    const fetchedLaunches = await httpGetLaunches();\n    saveLaunches(fetchedLaunches);\n  }, []);\n\n  useEffect(() => {\n    getLaunches();\n  }, [getLaunches]);\n\n  const submitLaunch = useCallback(async (e) => {\n    e.preventDefault();\n    setPendingLaunch(true);\n    const data = new FormData(e.target);\n    const launchDate = new Date(data.get(\"launch-day\"));\n    const mission = data.get(\"mission-name\");\n    const rocket = data.get(\"rocket-name\");\n    const target = data.get(\"planets-selector\");\n    const response = await httpSubmitLaunch({\n      launchDate,\n      mission,\n      rocket,\n      target,\n    });\n\n    // TODO: Set success based on response.\n    const success = response.ok;\n    if (success) {\n      getLaunches();\n      setTimeout(() => {\n        setPendingLaunch(false);\n        onSuccessSound();\n      }, 800);\n    } else {\n      onFailureSound();\n    }\n  }, [getLaunches, onSuccessSound, onFailureSound]);\n\n  const abortLaunch = useCallback(async (id) => {\n    const response = await httpAbortLaunch(id);\n\n    // TODO: Set success based on response.\n    const success = response.ok;\n    if (success) {\n      getLaunches();\n      onAbortSound();\n    } else {\n      onFailureSound();\n    }\n  }, [getLaunches, onAbortSound, onFailureSound]);\n\n  return {\n    launches,\n    isPendingLaunch,\n    submitLaunch,\n    abortLaunch,\n  };\n}\n\nexport default useLaunches;"]},"metadata":{},"sourceType":"module"}